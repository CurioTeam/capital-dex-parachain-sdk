import BigNumber from 'bignumber.js';
export type ROUND_MODE = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
export declare class FixedPointNumber {
    private precision;
    private inner;
    constructor(origin: number | string, precision?: number);
    static setGlobalPrecision(precision?: number): void;
    static fromRational(numerator: number | string | FixedPointNumber, denominator: number | string | FixedPointNumber, precision?: number): FixedPointNumber;
    static fromInner(origin: number | string, precision?: number): FixedPointNumber;
    static _fromBN(origin: BigNumber, precision?: number): FixedPointNumber;
    _setInner(origin: BigNumber): void;
    _getInner(): BigNumber;
    private setMode;
    toNumber(dp?: number, rm?: ROUND_MODE): number;
    toString(dp?: number, rm?: ROUND_MODE): string;
    toChainData(): string;
    trunc(): FixedPointNumber;
    frac(): FixedPointNumber;
    private alignPrecision;
    setPrecision(precision: number): void;
    forceSetPrecision(precision: number): void;
    getPrecision(): number;
    abs(): FixedPointNumber;
    plus(right: FixedPointNumber): FixedPointNumber;
    minus(right: FixedPointNumber): FixedPointNumber;
    times(right: FixedPointNumber): FixedPointNumber;
    div(right: FixedPointNumber): FixedPointNumber;
    reciprocal(): FixedPointNumber;
    isGreaterThan: (right: FixedPointNumber) => boolean;
    isGreaterThanOrEqualTo: (right: FixedPointNumber) => boolean;
    isLessThan: (right: FixedPointNumber) => boolean;
    isLessOrEqualTo: (right: FixedPointNumber) => boolean;
    isEqualTo: (right: FixedPointNumber) => boolean;
    isZero: () => boolean;
    isNaN: () => boolean;
    isFinaite: () => boolean;
    isNegative: () => boolean;
    isPositive: () => boolean;
    clone(): FixedPointNumber;
    min(...targets: FixedPointNumber[]): FixedPointNumber;
    max(...targets: FixedPointNumber[]): FixedPointNumber;
    add: (right: FixedPointNumber) => FixedPointNumber;
    sub: (right: FixedPointNumber) => FixedPointNumber;
    mul: (right: FixedPointNumber) => FixedPointNumber;
    lt: (right: FixedPointNumber) => boolean;
    gt: (right: FixedPointNumber) => boolean;
    lte: (right: FixedPointNumber) => boolean;
    gte: (right: FixedPointNumber) => boolean;
    eq: (right: FixedPointNumber) => boolean;
    static ZERO: FixedPointNumber;
    static ONE: FixedPointNumber;
    static TWO: FixedPointNumber;
    static THREE: FixedPointNumber;
    static FOUR: FixedPointNumber;
    static FIVE: FixedPointNumber;
    static SIX: FixedPointNumber;
    static TEN: FixedPointNumber;
}
